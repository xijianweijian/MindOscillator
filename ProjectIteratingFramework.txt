利用github，分发branches，作为分支汇总表的替代


Activity Framework
	1. 创建最终版本的repo
		Bsz-MBes/Project-Initiatives
		
	
	
	2. 创建开发中版本的repo
		master 分支
			开发中版本的备份
		0分支
			开发中版本的汇总分支
		
	（
	
	原则：
		
		由于git对word文档还没有diff功能的支持，或者相应的diff功能不够完善（比如对图片的修改问题），所以所有的针对同一个文档的修改必需人工完成：
		为了避免commit冲突，一个项目的不同逻辑类别的文件应有不同的成员撰写，或者至少在撰写一个逻辑类别的文件时要在一个新的分支进行
		
	）
	2. 开始迭代版本
		（针对自己负责的类别文件的撰写）
		1.1)fork 0分支
		
				所有的撰写/开发文档成员必须fork 0分支，在此基础之上，每个人负责一个逻辑类别文件的撰写，最后merge回0分支；
			
			
		（针对不是自己负责的类别文件的撰写）
		1.2)fork文件所在对应负责成员的分支或相应某个版本文件的分支（要知道当前正在负责那个文件所属的逻辑类别的撰写/开发的成员）
		
		

		2.1)针对0分支的所属自己撰写类别的文件进行修改
			建立自己负责类别文件的文件夹
				文件命名规则
					（原则：提供可重构的灵活性）
					类别名-负责人
			内容修改
		
		2.2)针对修改其他成员负责的分支的某个文档
			内容修改
			修改完成后把所得文档发给相应分支负责的成员，由这个分支负责的成员进行手工merge
				（利用office word的compare功能完成人工merge
			可以选择删除或保留分支，但此分支不再做merge
		
		
		（针对自己负责的类别人间的撰写）
		3)merge回0分支

				

			

命名规则
	项目描述文档的明名规则
		基础：
			（因为利用了Git作为版本迭代的功能做汇总）
			
			项目名
			
		规则
			新的分支明+项目的名字+文档功能名字+版本号
			
			文档功能名字：
				
			
			版本号格式：开发版本号.版本更变说明序列编号.开发历程碑.迭代次数
				
				开发版本号：
					从0开始，每次上线版本加1
				版本更变说明编号：
					由不同的修改类型
					
					

					
内容修改
	（词）定义
		被修改的版本称为基版本
	
	步骤
		基于本分支最新的文档来做修改：
		
		填写 "迭代版本描述"
		
		开始修改
			每次修改前或完成后
		
	步骤详细：
		1.迭代版本描述
			Rows:
				基版本的Github链接
				引用版本的Githun链接
				本次文档commit时的文件版本号
				本次文档的任务描述
				本次文档撰写/改相关的人
				其他说明
				开始时间
				预计结束时间
			解释：
		
		2. 迭代描述
			Columns:
				时间，/*修改地址（目录结构），修改类型，修改详细*/ 修改说明，修改人
			
			
			
			
			解释：
				时间
					日期即可
					////////////////////////////
									/*
									修改类型
										内容更改（针对基文档里某一内容的修改，不是描述整体的修改）
										内容增加
										内容删除
										
									修改地址
										规则基础：
											基于基文档的目录结构为基础
										
										
											写出修改的地方的目录结构（目录为修改内容的上一级目录）
												如：
													Case#1:
														基文档的目录结构为：
															(0, 逻辑，用来记录一级
																1.一级标题
																	1.二级标题
																		1.要修改的内容
																2.一级标题
																3.一级标题
																
														要记录的的地址为
															1.1.1
									*/	
					/////////////////////////////////////
				修改说明
					只需简单说明修改的逻辑就可以了，但是还是要符合以下原则：
						
					如果要有详细的追踪情况（即本次修改任何一个更改【删除和修改、增加】都要记录的话，记录起来效率太低了，可以借助软件或Word自带的compare功能来查看基于基板本的修改都有那些。
			
		
			
		
		
			
			
test
			
			
			
